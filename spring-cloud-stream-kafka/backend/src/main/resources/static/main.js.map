{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <title>Kafka WebSocket</title>\\n  <base href=\\\"/\\\">\\n\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n  <link rel=\\\"stylesheet\\\" href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\\\">\\n</head>\\n\\n<body>\\n  <div style=\\\"color: blue; text-align: center\\\">\\n    <h1>{{title}}</h1>\\n    <h3>{{description}}</h3>\\n  </div>\\n\\n  <div class=\\\"container\\\" style=\\\"width: 400px; margin-top: 20px;\\\">\\n\\n    <form class=\\\"form-inline\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"connect\\\">Make Connection:  </label><br>\\n        <button id=\\\"connect\\\" class=\\\"btn btn-default\\\" type=\\\"button\\\" [disabled]=\\\"!disabled\\\" (click)=\\\"connect()\\\">Connect</button>\\n        <button id=\\\"disconnect\\\" class=\\\"btn btn-default\\\" type=\\\"submit\\\" [disabled]=\\\"disabled\\\" (click)=\\\"disconnect()\\\">Disconnect</button>\\n      </div>\\n    </form>\\n\\n<!--    <form class=\\\"form-inline\\\" style=\\\"margin-top: 20px;\\\">-->\\n<!--      <div class=\\\"form-group\\\">-->\\n<!--        <label for=\\\"name\\\">User's Name:</label>-->\\n<!--        <input type=\\\"text\\\" id=\\\"name\\\" name=\\\"name\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"name\\\" />-->\\n<!--      </div>-->\\n<!--      <button id=\\\"send\\\" class=\\\"btn btn-default\\\" type=\\\"button\\\" (click)=\\\"sendName()\\\">Send</button>-->\\n<!--    </form>-->\\n\\n<!--    <br>-->\\n<!--    <button id=\\\"listall\\\" class=\\\"btn btn-default\\\" type=\\\"button\\\" (click)=\\\"getAllUsers()\\\">List All Users</button>-->\\n    <table id=\\\"conversation\\\" class=\\\"table table-striped\\\" style=\\\"margin-top: 20px;\\\">\\n      <thead>\\n        <tr>\\n          <th>Greetings</th>\\n        </tr>\\n      </thead>\\n      <tbody *ngFor=\\\"let greeting of greetings\\\">\\n        <tr>\\n          <td>{{greeting}}</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n\\n  </div>\\n</body>\\n\\n</html>\\n\"","import { Component } from '@angular/core';\nimport * as Stomp from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Kafka Websocket';\n  description = '';\n\n  greetings: string[] = [];\n  disabled = true;\n  name: string;\n  private stompClient = null;\n\n  constructor() { }\n\n  setConnected(connected: boolean) {\n    this.disabled = !connected;\n\n    if (connected) {\n      this.greetings = [];\n    }\n  }\n\n  connect() {\n    const socket = new SockJS('http://localhost:8080/kafka-stomp-endpoint');\n    this.stompClient = Stomp.over(socket);\n\n    const _this = this;\n    this.stompClient.connect({}, function (frame) {\n      _this.setConnected(true);\n      console.log('Connected: ' + frame);\n\n      _this.stompClient.subscribe('/topic/message', function (hello) {\n        _this.showGreeting(JSON.parse(hello.body).contents + \" - \" +\n        JSON.parse(hello.body).date);\n      });\n    });\n  }\n\n  disconnect() {\n    if (this.stompClient != null) {\n      this.stompClient.disconnect();\n    }\n\n    this.setConnected(false);\n    console.log('Disconnected!');\n  }\n\n  sendName() {\n    this.stompClient.send(\n      '/jsa/hello',\n      {},\n      JSON.stringify({ 'name': this.name })\n    );\n  }\n\n  getAllUsers() {\n    this.stompClient.send(\n      '/jsa/listall',\n      {}\n    );\n  }\n\n  showGreeting(message) {\n    this.greetings.push(message);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}